version: "3.8"

x-common-variables:
  master-hostname: &master-hostname 'redis-node'
  master-replicas: &master-replicas 6
  redis-port: &redis-port 6389
  redis-mem: &redis-mem 2G

services:
  nodes:
    image: wsandwitch/redis-cluster:latest
#    build: .
    hostname: redis-node{{.Task.Slot}} #must be the same as &master-hostname
    restart: always
    environment:
      MASTER_HOST: *master-hostname
      REDIS_PORT: *redis-port
      REDIS_MAXMEM: *redis-mem
      SLOT_NUM: '{{.Task.Slot}}'
      SLOTS_TOTAL: *master-replicas 
      MASTERS_TOTAL: 3
    deploy:
      resources:
         limits:
           cpus: '2'
           memory: *redis-mem
      replicas: *master-replicas
      placement:
        constraints: 
         - "node.labels.LATENCY!=high"
         - "node.labels.MEM!=low"
      restart_policy: 
        condition: any
  app:
    image: jeko/redis-cluster-proxy:unstable
    ports:
     - 16379:7788
    restart: always
    environment:
      MASTER_HOST: *master-hostname
      MASTER_PORT: *redis-port
      SLOTS_TOTAL: *master-replicas
    entrypoint: /bin/sh
    command: -c "redis-cluster-proxy --port 7788 --connections-pool-size 60 --connections-pool-min-size 20 --enable-cross-slot $$(sh -c 'for i in $$(seq -s \" \" 1 5);do echo $$MASTER_HOST$$i:$$MASTER_PORT;done')"
    deploy:
#      resources:
#         limits:
#           cpus: '2'
#           memory: '2G'
      placement:
        constraints: 
         - "node.labels.LATENCY!=high"
         - "node.labels.MEM!=low"
        max_replicas_per_node: 1
      replicas: 2
      restart_policy:
        condition: any

    
